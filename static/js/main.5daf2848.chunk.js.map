{"version":3,"sources":["registerServiceWorker.js","routes/index.jsx","index.js","utils/mobx/ConfigStore.js"],"names":["newWorker","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","log","state","controller","document","getElementById","className","catch","error","addEventListener","postMessage","action","Components","lazy","Promise","all","__webpack_require__","e","bind","LandingPage","indexRoutes","secure","path","name","component","process","hist","createBrowserHistory","MainRouter","props","react_default","a","createElement","ConfigStore","react","fallback","Router","history","Switch","map","prop","key","Comp","Route","render","routeProps","ReactDOM","src_MainRouter","URL","origin","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","d","__webpack_exports__","StoreProvider","useStore","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__","storeContext","React","createContext","createGameStore","font","changeFont","newFont","this","replacesStickyHeader","replaceSticky","val","_ref","children","store","useLocalStore","Provider","value","useContext","Error"],"mappings":"wIAsDIA,mCA5CEC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA4CN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtChB,EAAYe,EAEZA,EAAiBE,cAAgB,YAC/BC,QAAQC,IAAIJ,EAAiBK,OACE,cAA3BL,EAAiBK,SACfX,UAAUC,cAAcW,YAK1BH,QAAQC,IAAI,uDAEOG,SAASC,eAAe,oBAC7BC,UAAY,QAK1BN,QAAQC,IAAI,2CAMrBM,MAAM,SAAAC,GACLR,QAAQQ,MAAM,4CAA6CA,KApCjEJ,SAASC,eAAe,oBAAoBI,iBAAiB,QAAS,WACpE3B,EAAU4B,YAAY,CAAEC,OAAQ,6DCtD5BC,EAAaC,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAvB,KAAAsB,EAAAE,KAAA,YACxBC,EAAcN,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAvB,KAAAsB,EAAAE,KAAA,YAchBE,EAVG,CAEhB,CAAEC,QAAQ,EAAOC,KAAM,aAAcC,KAAM,aAAcC,UAAWZ,GACpE,CAAES,QAAQ,EAAOC,KAAM,WAAYC,KAAM,cAAeC,UAAWL,GACnE,CAAEE,QAAQ,EAAMC,KAAM,WAAYC,KAAM,cAAeC,UAPrCX,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAvB,KAAAsB,EAAAE,KAAA,aAQ7B,CAAEG,QAAQ,EAAOC,KAAM,IAAKC,KAAM,cAAeC,UAAWL,ICD9DnB,QAAQC,IAAIwB,gQAEZ,IAAIC,EAAOC,cAELC,EAAa,SAACC,GAElB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,SAAD,CAAUC,SAAUL,EAAAC,EAAAC,cAAA,OAAK1B,UAAU,kBACnCwB,EAAAC,EAAAC,cAAA,OAAK1B,UAAU,qBAEbwB,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,QAASX,GACfI,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACGlB,EAAYmB,IAAI,SAACC,EAAMC,GACtB,IAAIC,EAAOF,EAAKhB,UAChB,OAAOM,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOrB,KAAMkB,EAAKlB,KAAMmB,IAAKA,EAAKG,OAAQ,SAACC,GAAD,OAC/Cf,EAAAC,EAAAC,cAACU,EAAD,gBAQdI,IAASF,OACTd,EAAAC,EAAAC,cAACe,EAAD,MACI3C,SAASC,eAAe,SFjBf,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAIyD,IAAIvB,aAAwBxC,OAAOC,UAC3C+D,SAAWhE,OAAOC,SAAS+D,OAIvC,OAGFhE,OAAOwB,iBAAiB,OAAQ,WAC9B,IAAMnB,EAAK,GAAA4D,OAAMzB,aAAN,sBAEP1C,GA6DV,SAAiCO,GAE/B6D,MAAM7D,GACHI,KAAK,SAAA0D,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CjE,UAAUC,cAAciE,MAAM/D,KAAK,SAAAC,GACjCA,EAAa+D,aAAahE,KAAK,WAC7BT,OAAOC,SAASyE,aAKpBtE,EAAgBC,KAGnBiB,MAAM,WACLP,QAAQC,IACN,mEAjFA2D,CAAwBtE,GAIxBC,UAAUC,cAAciE,MAAM/D,KAAK,WACjCM,QAAQC,IACN,+GAMJZ,EAAgBC,METpBuE,mCCvCJ7C,EAAA8C,EAAAC,EAAA,sBAAAC,IAAAhD,EAAA8C,EAAAC,EAAA,sBAAAE,IAAA,IAAAC,EAAAlD,EAAA,GAAAmD,EAAAnD,EAAAoD,EAAAF,GAAAG,EAAArD,EAAA,IAMMsD,EAAeC,IAAMC,gBAE3B,SAASC,IAEL,MAAO,CACHC,KAAM,gBACNC,WAFG,SAEQC,GACPC,KAAKH,KAAOE,GAEhBE,sBAAqB,EACrBC,cANG,SAMWC,GACVH,KAAKC,qBAAqBE,IAO/B,IAAMhB,EAAgB,SAAAiB,GAAkB,IAAfC,EAAeD,EAAfC,SACtBC,EAAQC,YAAcX,GAC5B,OAAON,EAAApC,EAAAC,cAACsC,EAAae,SAAd,CAAuBC,MAAOH,GAAQD,IAGpCjB,EAAW,WACpB,IAAMkB,EAAQZ,IAAMgB,WAAWjB,GAC/B,IAAKa,EACD,MAAM,IAAIK,MAAM,uDAEpB,OAAOL","file":"static/js/main.5daf2848.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nlet newWorker;\r\ndocument.getElementById('reloadNewVersion').addEventListener('click', function(){\r\n  newWorker.postMessage({ action: 'skipWaiting' });\r\n});\r\n\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        newWorker = installingWorker;\r\n        \r\n        installingWorker.onstatechange = () => {\r\n          console.log(installingWorker.state);\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app. \r\n              console.log('New content is available; please refresh. ( test2 )');\r\n              \r\n              let notification = document.getElementById('notifNewVersion ');\r\n              notification .className = 'show';\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { lazy} from \"react\"; \r\n  \r\nconst Components = lazy(() => import(\"views/Components/Components.jsx\"));\r\nconst LandingPage = lazy(() => import(\"views/LandingPage/LandingPage.jsx\"));\r\nconst ProfilePage = lazy(() => import(\"views/ProfilePage/ProfilePage.jsx\"));\r\n \r\n\r\nvar indexRoutes = [\r\n \r\n  { secure: false, path: \"/component\", name: \"Components\", component: Components },\r\n  { secure: false, path: \"/landing\", name: \"LandingPage\", component: LandingPage }, \r\n  { secure: true, path: \"/profile\", name: \"ProfilePage\", component: ProfilePage },\r\n  { secure: false, path: \"/\", name: \"LandingPage\", component: LandingPage },\r\n\r\n];\r\n \r\n \r\nexport default indexRoutes;\r\n","import React, { useEffect, useState, Suspense, lazy } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\n//// TODO : Move these after the page loader\r\nimport { createBrowserHistory } from \"history\";\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport { StoreProvider } from 'utils/mobx/ConfigStore';\r\nimport indexRoutes from \"routes/index.jsx\";\r\n\r\n\r\nconsole.log(process.env);\r\n\r\nvar hist = createBrowserHistory();\r\n\r\nconst MainRouter = (props) => {\r\n\r\n  return (\r\n    <StoreProvider>\r\n      <Suspense fallback={<div className=\"initial-parent\">  \r\n      <div className=\"initial-loader\" />\r\n        </div>}>\r\n        <Router history={hist}>\r\n          <Switch>\r\n            {indexRoutes.map((prop, key) => { //indexRoutes ou debounceRenderPages\r\n              let Comp = prop.component;\r\n              return <Route path={prop.path} key={key} render={(routeProps) => (\r\n                <Comp />)} />;\r\n            })}\r\n          </Switch>\r\n        </Router>\r\n      </Suspense>\r\n    </StoreProvider>);\r\n  };\r\n  \r\n  ReactDOM.render(\r\n  <MainRouter />,\r\n      document.getElementById(\"root\")\r\n    );\r\n    registerServiceWorker();\r\n    \r\n    \r\n    \r\n    /*\r\n    var promptEvent = null;\r\n    \r\nwindow.addEventListener('beforeinstallprompt', (e) => {\r\n        promptEvent = e;\r\n     e.preventDefault();\r\n     console.log(\"Showing prompt in 3 sec.\");\r\n  setTimeout(()=>{\r\n        console.log(\"Showing Prompt\");\r\n      showA2HSPrompt();},\r\n      3000);\r\n  });\r\n  \r\nwindow.addEventListener('appinstalled', (e) => {\r\n        //app.logEvent('a2hs', 'installed');`\r\n        console.log(\"app installed.\");\r\n    })\r\n    \r\nfunction showA2HSPrompt() {\r\n        promptEvent.prompt();\r\n  promptEvent.userChoice.then((choiceResult) => {\r\n        console.log(choiceResult.outcome);\r\n    });\r\n}*/","import React from 'react'\r\nimport { useLocalStore } from 'mobx-react-lite'\r\n//Servers as an example : \r\n//    import {createQuotesStore} from \"./Quotes\"\r\n// from : https://github.com/andresrestrepo/tictactoe/blob/master/src/stores/ConfigStore.js \r\n\r\nconst storeContext = React.createContext();\r\n\r\nfunction createGameStore() {\r\n\r\n    return {\r\n        font: \"Special Elite\",\r\n        changeFont(newFont) {\r\n            this.font = newFont\r\n        },\r\n        replacesStickyHeader:false,\r\n        replaceSticky(val){\r\n            this.replacesStickyHeader=val\r\n        },\r\n    //Servers as an example : \r\n      //  ,...createQuotesStore()\r\n    }\r\n}\r\n\r\nexport const StoreProvider = ({ children }) => {\r\n    const store = useLocalStore(createGameStore)\r\n    return <storeContext.Provider value={store}>{children}</storeContext.Provider>\r\n}\r\n\r\nexport const useStore = () => {\r\n    const store = React.useContext(storeContext)\r\n    if (!store) {\r\n        throw new Error('You have forgot to use StoreProvider, shame on you.')\r\n    }\r\n    return store\r\n}"],"sourceRoot":""}